 php笔记 ：https://www.kancloud.cn/nickpang/phper/2400752
https://www.kancloud.cn/nickpang/phper/2400752
 cgi是web服务器和php解释器之间的通信协议，用来保证数据正确传输。

 php-cgi只能解析请求，返回结果，不会管理进程。

 Fastcgi是用来提高cgi程序（php-cgi）性能的方案/协议。

 cgi程序的性能问题在哪呢？

 "PHP解析器会解析php.ini文件，初始化执行环境"。标准的CGI对每个请求都会执行这些步骤，所以处理的时间会比较长。

 Fastcgi会先启一个master，解析配置文件，初始化执行环境，然后再启动多个worker。当请求过来时，master会传递给一个worker，然后立即可以接受下一个
 请求。这样就避免了重复劳动，效率自然提高。而且当worker不够用时，master可以根据配置预先启动几个worker等着；当然空闲worker太多时，
 也会停掉一些，这样就提高了性能，也节约了资源。这就是Fastcgi的对进程的管理。

 FastCGI是一个方案或者协议，php-fpm就是FastCGI的一个管理工具，也就是说，进程的分配和管理都是php-fpm来做的。

 php-fpm的管理对象是php-cgi，他负责管理一个进程池，处理来自Web服务器的请求。

 对于php.ini文件的修改，php-cgi进程是没办法平滑重启的，有了php-fpm后，就可以平滑重启了。

 原理是php-fpm会用新的配置文件启用新的worker进程，已经存在的老的worker处理完手上的活就可以歇着了，老的进程在请求处理完成就会被回收。php-fpm就是通过这种机制来平滑过度的。

 ============================================================================================

 php 為什麼比C語言慢呢？
 因为php为了方便编写，没有强制要求定义变量的类型，所以不能被编译，在运行的时候，需要检查变量的类型，这个就消耗了时间，所以慢。

 解决办法就是将变量定义类型，在运行的时候不再检查类型。这样可以提升速度。代码被编译成机器码，可以直接运行了，速度很快。但是这样子
 搞就变成了静态语言了。

 动态语言和静态语言的区别就是在运行的时候检查变量类型。php已经有编译器，将php编译成机器码了，但是php升级后就要升级编译器，所以
 使用范围有限。php官方也没有开发一个牛逼的编译器。

 ================================================================================================

 php本身是可以编写一个编译器的，使用php生成代码的机器码，生成可执行文件就OK了，但是没人这么干，为什么呢，因为大多数phper水平很低。而且如果无利可图
 就没人愿意做，反正做软件这一块，靠的是天才和兴趣，其他人都靠着天才吃饭。

 ===================================================================================================================

 php性能的提升这一块，比如数组，以前的php数组使用的是hash，每次读取数据，是先从一级缓存读，没有就读二级缓存，还没有读取三级缓存，比较耗时。
 升级后，使用双向链表，我们知道链表是保存了上一个元素和下一个元素的地址的链条，可以直接到对应内存地址读取数据。就快多了。
 =====================================================================================================
 这些事件机制（select、poll、epoll、kqueue、/dev/poll、port）都是用于在多路复用I/O操作中进行事件驱动的技术。它们在操作系统层面提供了不同的方式来监控多个文件描述符（sockets、文件等），以确定哪些描述符已经准备好进行读取或写入，从而避免使用阻塞I/O时的资源浪费和效率问题。

 1. select
 原理：select是最古老的多路复用技术之一，它允许程序同时监视多个文件描述符的状态变化。
 特点：通过调用select函数，将待监视的文件描述符集合传递给内核，内核会检查每个文件描述符的状态，并返回就绪的文件描述符集合。
 缺点：效率较低，最大文件描述符数量受限制。
 2. poll
 原理：poll与select类似，但没有文件描述符数量的限制。
 特点：使用poll系统调用来监视文件描述符的状态变化，返回就绪的文件描述符集合。
 缺点：当文件描述符数量较大时，性能下降明显，因为每次调用poll都需要将所有的文件描述符集合从用户态拷贝到内核态。
 3. epoll
 原理：epoll是Linux特有的高性能I/O事件通知机制。
 特点：
 使用三个系统调用：epoll_create创建一个epoll句柄，epoll_ctl注册要监听的事件，epoll_wait等待事件就绪。
 支持水平触发（LT）和边缘触发（ET）两种模式。
 使用事件就绪列表避免了传统select和poll中需要遍历整个文件描述符集合的性能问题。
 优点：适用于大量连接的高性能场景，尤其是非阻塞I/O。
 4. kqueue
 原理：kqueue是BSD（包括macOS）上的事件通知机制。
 特点：
 使用kqueue系统调用来注册关注的事件和等待事件就绪。
 支持多种类型的事件，如文件描述符、定时器、信号等。
 提供更好的性能和扩展性，可以处理大量并发连接。
 适用性：主要用于BSD和macOS系统。
 5. /dev/poll
 原理：/dev/poll是Solaris上的事件通知机制。
 特点：
 通过/dev/poll设备文件进行事件注册和等待就绪。
 提供了与kqueue类似的高性能和扩展性。
 适用性：主要用于Solaris系统。
 6. port（Solaris中的事件机制）
 原理：port是Solaris上用于事件通知的一种机制。
 特点：
 类似于kqueue和/dev/poll，提供高性能的事件通知。
 可以处理大量并发连接和其他类型的事件。
 适用性：主要用于Solaris系统。
 总结
 这些事件机制都是为了解决I/O多路复用中的效率问题而设计的，各自在不同的操作系统平台上有不同的实现和特性。选择合适的事件机制通常取决于应用程序的具体需求、目标平台以及所需的性能和可移植性。
 ===============================================================================================================================
为什么用Kqueue？
Wiki上的解释：

kqueue 是一种可扩展的事件通知接口。2000 年 7 月发布的 FreeBSD 4.1 中首次引入了 kqueue，随后也被 NetBSD、OpenBSD、macOS 等操作系统支持。
kqueue 在内核与用户空间之间充当输入输出事件的管线。因此在事件循环的迭代中，进行一次 kevent(2) 系统调用不仅可以接收未决事件，还可以修改事件过滤器。

简单解释，Kqueue是unix系统上高效的IO多路复用技术（常见的io复用有select、poll、epoll、kqueue等等，其中epoll为Linux系统独有，kqueue则在众多unix系统中存在）。

为什么要有IO多路复用？
阻塞I/O模式下，一个线程只能处理一个流的I/O事件（比如用户线程发起一个IO请求操作，内核会去查看要读取的数据是否就绪，如果数据没有就绪，则会一直在那等待，直到数据就绪，当数据就绪之后，便将数据拷贝到用户线程）。所以，如果想要同时处理多个流，要么多进程(fork)，要么多线程(pthread_create)，很不幸这两种方法效率都不高。
所以，考虑非阻塞忙轮询的I/O方式，我们发现我们可以同时处理多个流了。使用select，我们有O(n)的无差别轮询复杂度，同时处理的流越多，每一次无差别轮询时间就越长。select/poll是通过轮询的方法来获得就绪的状态，调用select/poll后就阻塞住，直到有就绪的文件描述符，或者超时，或者被中断。返回值是就绪的文件描述符的个数，需要遍历作为参数传入的文件描述符的位域或数组获得文件描述符。

Kqueue和Epoll的优势：通过callback避免忙轮询

epoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll之会把哪个流发生了怎样的I/O事件通知我们。此时我们对这些流的操作都是有意义的。
kqueue与epoll非常相似，在注册一批文件描述符到 kqueue 以后，当其中的描述符状态发生变化时，kqueue将一次性通知应用程序哪些描述符可读、可写或出错了（即产生事件Event）。

什么是Kqueue？
kqueue是freebsd内核中的一个事件队列kernel queue。在kqueue实现中，比较关键的是一个knote结构体，该结构体在内核空间对应于应用层的kevent结构体。

kqueue的实现由三个子结构体组成，每个结构体的基本元素是knote：

一个队列，用来保存active的knotes节点。（有事件发生的节点，这个队列就是已完成事件队列）
一个hashtable 用来存储和查找identity->descriptor的映射。
线性的描述符list，用来存储和查找有对应描述符的knotes节点。（用于保证当事件kevent的fd文件描述符被关闭后，对应的knote被释放）
在一个 kqueue 中，{ident, filter} 确定一个唯一的事件，这个事件被称为Kevent，它的结构体如下：

type Kevent_t struct {
   Ident  uint64
   Filter int16
   Flags  uint16
   Fflags uint32
   Data   int64
   Udata  *byte
}

Ident：事件的 id，一般设置为文件描述符。在 socket 使用中，它是 socket 的 fd 句柄。
Filter： filter 是事件的类型，有 15 种。内核检测 ident 上注册的 filter 的状态，状态发生了变化，就通知应用程序。
kevent 定义了较多的 filter，比如与socket读写相关的filter：
EVFILT_READ：TCP 监听 socket，如果在完成的连接队列 ( 已收三次握手最后一个 ACK) 中有数据，此事件将被通知。收到该通知的应用一般调用 accept()，且可通过 data 获得完成队列的节点个数。 流或数据报 socket，当协议栈的 socket 层接收缓冲区有数据时，该事件会被通知，并且 data 被设置成可读数据的字节数。
EVFILT_WRIT：当 socket 层的写入缓冲区可写入时，该事件将被通知；data 指示目前缓冲区有多少字节空闲空间。
EVFILT_USER 用户自定义的事件，由用户代码触发（而非内核触发）
Flags：操作事件的方式，比如，EV_ADD 添加事件到Kqueue，EV_DELETE 删除，EV_ENABLE 激活，EV_DISABLE 不激活。
FFlags：Filter-specific flags，特定 filter 的专有标志，可用于保存专有返回信息。
Data：int 型的用户数据，特定 filter 存储专有信息，比如socket 里面它是可读写的数据长度。
UData：指针类型的数据，你可以携带任何想携带的附加数据。比如对象、指针地址（Opaque User Data Identifier）。
Kqueue怎么运行？
Kqueue是这样初始化的：

获取和分配Kqueue
最初， 应用程序调用kqueue() 来分配一个新的kqueue, 涉及到了分配一个新的kqueue描述符、kqueue结构体、和一个指向已打开文件描述符table的指针, 这个时候并没有给这个给array和hashtable分配空间.
链接Kevent和Knote
应用调用kevent()传递一个changelist指针(Kevents的数组)，changelist中的kevents从用户空间copy到内核空间, 然后对每一个kevents调用register()：register()先在KQ中查找是否有匹配的knotes, 如果过没有，表明第一次添加，分配一个新的knotes(有EV_ADD标记).根据传递来的kevent信息对新建的knotes进行初始化，并调用attacth()将knote连接到事件源(如tcp收包)。
添加Knote到队列
之后将knote添加到kqueue的hashtable或array中
Kqueue是这样运行的：

事件源有事件发生时，即收到事件时，事件源会对attach到自己的knotes链表调用knote()函数：扫描所有link到该事件源的knotes，检测事件是否满足通知条件（KeventFilter）, 如果事件条件满足则将该knote放入到kqueue的active list队列里，最终会传递给应用层。
事件是由 <file,filter> 两者唯一确定的。这说明，如果在创建event 时，相同的文件描述符，不同的filter 的组合，最终的创建的事件是不同的。在内核中，相同文件的不同事件由klist 进行管理。当该数据结构上发生某种变化时，就会遍历klist，确定是否有事件发生。

一个示例
使用Kqueue和KEvent非常简单：

func initKqueue() {
   kqueueFd, err := syscall.Kqueue()
   fd := int(os.Stdin.Fd())

   //build kEvent
   //fileFd = 0
   kEvent1 := syscall.Kevent_t{
      Ident:  uint64(fd),
      Filter: syscall.EVFILT_READ,
      Flags:  syscall.EV_ADD,
   }

   //register kEvent to kernel
   _, err = syscall.Kevent(kqueueFd, []syscall.Kevent_t{kEvent1}, nil, nil)
   if err != nil {
      logs.Fatal("register kEvent error, err:%v", err)
   }
   for {
      kEventArr := make([]syscall.Kevent_t, 10)
      keventNum, err := syscall.Kevent(kqueueFd, nil, kEventArr, nil)
      if err != nil {
         logs.Fatal("get kEvent error, err:%v", err)
      }
      logs.Info("kEvent Num:%v", keventNum)
      for i := 0; i < keventNum; i++ {
         logs.Info("kevent:%+v", kEventArr[i])
      }
      time.Sleep(2 * time.Second)
      logs.Info("done.")
   }
}
————————————————

版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。

原文链接：https://blog.csdn.net/No_Game_No_Life_/article/details/111454706

==========================================================================================================================
vpn
https://xn--clouds-o43k.com/#/stage/buysubs
https://hitun.io/
https://sakuracat-1.com/


====================================================================================================
php多线程扩展
https://blog.csdn.net/wwz_henu/article/details/129367377
https://blog.csdn.net/wwz_henu/article/details/129397237

=================================================================
无人机基础知识
无人机（Unmanned Aerial Vehicle, UAV），通常被称为无人驾驶飞行器，是一种不载人、通过遥控或自主控制系统进行飞行的飞行器。无人机广泛应用于军事、农业、环境监测、物流、摄影和测绘等领域。以下是无人机的基础知识和控制原理。

基础知识
类型：

多旋翼无人机：最常见的类型，包括四旋翼（四轴）、六旋翼和八旋翼等。优点是控制简单，悬停能力强。
固定翼无人机：类似于传统的飞机，具有较高的速度和航程，但无法悬停。
混合型无人机：结合多旋翼和固定翼的优点，既能悬停又能高速飞行。
基本组成部分：

飞控系统（Flight Control System）：无人机的大脑，包括传感器（如加速度计、陀螺仪、气压计、GPS等）和控制算法，用于稳定飞行和执行指令。
电机和螺旋桨：负责提供升力和推力。
电池：提供无人机飞行所需的电力。
机身：无人机的框架，支撑其他组件。
遥控器和接收器：用于人工遥控无人机。
摄像头和传感器：用于获取图像、视频和其他环境数据。
应用领域：

军事用途：侦察、监视、打击目标等。
民用用途：农业监测、环境保护、物流配送、航拍摄影、测绘等。
控制原理
无人机的控制原理基于飞控系统，它通过传感器获取飞行状态数据，并根据预定算法计算控制指令，最终通过调整电机的转速来实现飞行控制。以下是无人机的主要控制原理：

姿态控制：

俯仰（Pitch）：控制无人机前后倾斜，通过调节前后电机的转速实现。
滚转（Roll）：控制无人机左右倾斜，通过调节左右电机的转速实现。
偏航（Yaw）：控制无人机水平旋转，通过调节对角线电机的转速差实现。
高度控制：

通过调节所有电机的转速同步增减来控制无人机的上升和下降。
位置控制：

通过姿态控制和高度控制的综合运用来实现无人机在三维空间中的移动。
自主飞行控制：

通过预设航点、路径规划和导航算法，无人机可以自主执行飞行任务。
利用 GPS、视觉导航、激光雷达等传感器实现自主避障和精准定位。
反馈控制：

飞控系统通过传感器实时监测无人机的姿态和位置，将实际状态与目标状态进行比较，计算误差并生成纠正指令，实现闭环控制。
具体控制算法
PID控制：

比例-积分-微分（PID）控制是无人机姿态和高度控制的基础算法。通过调节PID参数，可以精确控制无人机的稳定性和响应速度。
卡尔曼滤波：

用于传感器数据融合和状态估计，滤除噪声，提高数据精度。
状态机和任务规划：

管理无人机的不同飞行状态（如起飞、悬停、飞行、降落）和任务执行逻辑。
无人机控制的复杂性随着应用需求和飞行环境的变化而增加，尤其在自主飞行和多无人机协同作业等高级应用中，控制算法和系统设计更加复杂和智能化。

其中gpu负责处理图像，cpu负责处理
gpu是做图像计算，cpu做数据计算

=========================================================================================================================

涉及到电池，无线电新号，图像采集处理，数据计算，避障功能，电机，硬件功能，软件功能算法，
图像识别，自动化任务，各种高难度动作，数据传输，数据安全性，信号安全性，网络通信，GPS定位这些学科，无人机是个高科技啊。

==============================================================================================
无人机使用c语言研发，c语言真是强大。也提供c和python的sdk。

c语言无孔不入，渗透了硬件和软件，渗透了生活的方方面面。其他语言要么专精硬件，要么专精软件。
===================================================================================================
大疆无人机开发平台文档：https://developer.dji.com/cn/onboard-sdk/documentation/tutorial/advanced-sensing.html

政府投入那么多钱，花了那么多时间，没有搞出来。阿西吧。还要靠民间技术来搞。政府那么多钱是怎么花的额，无语了。

这个无人机可以自定义任务。规划路线，设置脱离控制继续执行任务，还可以跟踪目标，这不就是军用无人机嘛。难怪有出口限制。
============================================================================================
快手的开源项目，使用python搞得模型，可以根据文字生成图像，动态不全图像。可以参照我的其他项目

=========================================================================================================
算法课程
https://www.hello-algo.com/chapter_hello_algo/

===========================================================================================================
for，while循环是迭代，从上而下执行
而递归算法是自下而上，将每一个步骤都存放到栈内存中，这样子会导致额外的开销，所以在数据量很大，运行次数很多的情况下，不要使用递归，可能会导致内存泄漏。

在实际中，编程语言允许的递归深度通常是有限的，过深的递归可能导致栈溢出错误。

递归的经典案例是数学上的数列：f(n)= f(n-1) + f(n-2);

时间复杂度的确定原则：系数无法撼动阶数

当趋于无穷大时，这些常数变得无足轻重。

在实际生产环境下，尽量不要用递归，递归因为保存函数上下文，会导致内存泄漏。所以尽可能将递归修改为迭代，或者使用php的生成器。
=============================================================================================================
常用的时间复杂度的表达式
指数阶 O(2^n) 两层for循环，外层是一阶，内存是指数级。比如等比数列求和。
平方阶 O(n^2) 就是两层for循环 比如冒泡排序
线性阶 O(n)   和n的关系是一元一次方程
对数阶 O(log n)  就是每执行一次，剩余执行次数下降一半，导致时间消耗下降一半。
常数阶 O(1)  和N无关，只计算固定的次数
阶乘 O(n!) 这个是全排列  节点数大于2^n次方，所以负责度更高，比如某一个数的全排列。


=========================================================================================
用到二叉树的的排序方法，复杂度都是O(n log(n))
计算过程详见：https://www.hello-algo.com/chapter_computational_complexity/time_complexity/#6-on-log-n
==================================================================================================

函数（function）可以被独立执行，所有参数都以显式传递。方法（method）与一个对象关联，被隐式传递给调用它的对象，能够对类的实
例中包含的数据进行操作。

======================================================================================

数组的存储空间是连续的，链表的存储空间是分散的。

从图上可以看出，链接占用了更多的内存，因为还需要存指针。

===================================================
缓存，内存和硬盘

比如我们切菜，砧板就是缓存，灶台就是内存，仓库就是硬盘。
https://www.hello-algo.com/chapter_array_and_linkedlist/ram_and_cache/#441
========================================================
使用大质数作为模数，可以最大化地保证哈希值的均匀分布。因为质数不与其他数字存在公约数，可以减少因取模操作而产生的周期性模式，从而避免哈希冲突。


数据库使用三层平衡二叉树保存数据，复杂度是对数阶，复杂度呈对数阶下降，因为搜索范围呈对数阶下降。
====================================================================================
关于前序遍历，中序遍历，后序遍历
判断依据是根节点的被遍历的位置

然后就是先左节点，后右节点

前序遍历：根节点，左节点，右节点
中序遍历：左节点，根节点，右节点
后序遍历：左节点，右节点，根节点
===============================================================================
学习目标
先学习使用django搭建mvc网站
然后学习编写爬虫。
与其凌渊羡鱼不如退而结网。
================================================================



HTML5 Drag and Drop API（拖放 API）基础原理
事件驱动机制
HTML5 提供了一系列的拖放事件来实现拖拽上传功能。主要的事件包括 dragstart、drag、dragenter、dragover、drop 和 dragend。
当用户开始拖拽一个元素（例如文件）时，会在被拖拽元素上触发 dragstart 事件。这个事件可以用于设置被拖拽数据的相关信息，如文件内容等。在整个拖拽过程中，会不断触发 drag 事件，它可以用于更新一些视觉提示或者状态。
当被拖拽元素进入一个有效的放置目标区域时，会触发该区域的 dragenter 事件。接着，dragover 事件会在放置目标区域上持续触发，这个事件很关键，因为默认情况下，浏览器是不允许在大多数元素上进行放置操作的，所以需要在放置目标区域的 dragover 事件处理函数中阻止浏览器的默认行为，以允许放置操作。
当用户在目标区域释放鼠标，完成拖拽操作时，会触发 drop 事件，这个事件用于处理接收到的数据，例如读取上传文件的内容等。最后，dragend 事件会在被拖拽元素上触发，表示拖拽操作结束。
数据传输（DataTransfer）对象
在 dragstart 事件处理函数中，会使用到 DataTransfer 对象。这个对象用于在拖拽源和放置目标之间传递数据。例如，当拖拽一个文件时，可以通过 DataTransfer 对象获取文件相关信息，如文件名、文件类型和文件内容（通过 FileReader 读取）。
它有一些重要的方法和属性，比如 setData() 方法用于设置要传递的数据，getData() 方法用于在放置目标处获取数据。在文件拖拽上传的场景中，DataTransfer 对象的 files 属性用于获取被拖拽的文件列表，这些文件可以在 drop 事件处理函数中进行进一步处理，如上传到服务器。
实现步骤示例
HTML 结构部分
首先，需要在网页上定义一个放置目标区域，通常是一个 div 或者其他合适的 HTML 元素。例如：
html
复制
<div id="drop - zone">将文件拖放到此处</div>
CSS 样式部分
为放置目标区域添加一些样式，以提供视觉提示，让用户知道这是一个可以放置文件的区域。例如：
css
复制
#drop - zone {
    border: 2px dashed gray;
    width: 300px;
    height: 200px;
    text - align: center;
    padding - top: 80px;
    color: gray;
}
JavaScript 事件处理部分
dragenter 和 dragover 事件处理：
为放置目标区域添加 dragenter 和 dragover 事件处理函数，在这些函数中阻止浏览器的默认行为，使得可以在这个区域进行文件放置。例如：
javascript
复制
const dropZone = document.getElementById('drop - zone');
dropZone.addEventListener('dragenter', (e) => {
    e.preventDefault();
});
dropZone.addEventListener('dragover', (e) => {
    e.preventDefault();
});
drop 事件处理：
在 drop 事件处理函数中，获取被拖拽的文件列表，并可以进行后续的上传操作。假设使用 XMLHttpRequest 来上传文件，示例代码如下：
javascript
复制
dropZone.addEventListener('drop', (e) => {
    e.preventDefault();
    const files = e.dataTransfer.files;
    for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const reader = new FileReader();
        reader.onload = function (event) {
            // 创建XMLHttpRequest对象用于上传文件
            const xhr = new XMLHttpRequest();
            xhr.open('POST', 'your - upload - url', true);
            xhr.setRequestHeader('Content - Type', 'application/octet - stream');
            xhr.send(event.target.result);
        };
        reader.readAsArrayBuffer(file);
    }
});
在上述 drop 事件处理函数中：
首先通过 e.dataTransfer.files 获取被拖拽的文件列表。
然后对于每个文件，使用 FileReader 读取文件内容。当文件内容读取完成后（reader.onload 事件触发），创建一个 XMLHttpRequest 对象，设置请求方式为 POST，并将文件内容以二进制流的形式（application/octet - stream）发送到指定的上传 URL（your - upload - url 需要替换为实际的上传地址）。
通过以上的 HTML5 Drag and Drop API 以及相关的事件处理和数据传输机制，就可以实现网页上的拖拽上传功能。

=======================================================================================================
异步函数的基本概念
在 JavaScript 中，async关键字用于定义一个异步函数。异步函数是一种特殊的函数，它返回一个Promise对象。这意味着函数的执行不会阻塞后续代码的运行，程序可以在异步函数执行的同时继续执行其他任务。
示例对比同步函数和异步函数
同步函数
考虑以下同步函数：
javascript
复制
function addNumbers(a, b) {
    return a + b;
}
let result = addNumbers(3, 5);
console.log(result);
console.log("其他操作");
在这个例子中，addNumbers函数是同步函数。当调用addNumbers函数时，程序会等待函数执行完毕并返回结果后，才会继续执行下一行代码。所以console.log(result)会先打印出8，然后console.log("其他操作")才会执行。
异步函数
现在看一个异步函数的例子：
javascript
复制
async function getData() {
    // 模拟一个异步操作，比如从网络获取数据
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve("模拟获取的数据");
        }, 2000);
    });
}
getData().then((result) => {
    console.log(result);
});
console.log("其他操作");
在这里，getData函数是异步函数，因为它前面有async关键字。函数内部返回一个Promise，这个Promise在2秒后通过resolve返回一个模拟获取的数据。当调用getData函数时，它会立即返回一个Promise对象，程序不会等待Promise的状态变为resolved（已解决）就会继续执行下一行代码，所以console.log("其他操作")会先执行，大约2秒后，Promise的then方法中的回调函数才会被调用，打印出模拟获取的数据。
async函数内部的await关键字配合使用
async函数内部通常会和await关键字一起使用。await只能在async函数内部使用，它会暂停async函数的执行，直到等待的Promise被解决（resolved）或被拒绝（rejected）。
例如：
javascript
复制
async function getDataAndProcess() {
    const data = await getData();
    console.log("获取到数据后进行处理");
    return data.toUpperCase();
}
getDataAndProcess().then((result) => {
    console.log(result);
});
在getDataAndProcess函数中，await getData()会暂停函数的执行，直到getData函数返回的Promise被解决，获取到数据后，函数才会继续执行后面的代码，打印获取到数据后进行处理，然后对数据进行处理并返回。这种方式让异步代码在一定程度上可以像同步代码一样按照顺序编写，使代码逻辑更清晰，尤其是在处理多个依赖的异步操作时非常有用。
错误处理
因为async函数返回一个Promise，所以可以使用Promise的catch方法来处理异步函数中的错误。例如：
javascript
复制
async function getDataWithError() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            reject("出现错误");
        }, 2000);
    });
}
getDataWithError().catch((error) => {
    console.error(error);
});
在这个例子中，getDataWithError函数返回的Promise在2秒后被拒绝，通过catch方法可以捕获这个错误并进行处理，在控制台打印出出现错误。

=========================================================================

这一段JavaScript使用next生成器，目的是实现异步操作的作用。PHP中也有yeild关键字，称为迭代器
remainTimer = setTimeout(() => {
        Cookies.set('overTimer', 1)

        if(Cookies.get('overTimer') >= 1) {
          alert('您已登录超时')

          clearTimeout(remainTimer)
          Cookies.remove('overTimer')
          Cookies.set('loginType', false)

          window.localStorage.clear()
          axios.get('/LoginApi/loginOut')

          next({
            path: '/',
            query: {
              redirect: to.fullPath
            } // 将跳转的路由path作为参数，登录成功后跳转到该路由
          })
        }
      }, 7200000)
=======================
javascript 中的时间
获取当前时间戳
var timestamp = new Date()
根据一个日期创建时间戳
var timestamp1 = new Date('2024-11-05')
将时间戳转化为制定格式
s_time = new Date().Format("yyyy-MM-dd")

================================================================================================================
使用Javascript操作日期

// 获取当前时间
const now = new Date();

// 设置为昨天的日期
const yesterday = new Date(now);
yesterday.setDate(yesterday.getDate() - 1);

// 获取昨天00:00:00的时间并格式化为指定格式
const startOfYesterday = new Date(yesterday);
startOfYesterday.setHours(0);
startOfYesterday.setMinutes(0);
startOfYesterday.setSeconds(0);
startOfYesterday.setMilliseconds(0);
const startFormatted = formatDate(startOfYesterday);

// 获取昨天23:59:59的时间并格式化为指定格式
const endOfYesterday = new Date(yesterday);
endOfYesterday.setHours(23);
endOfYesterday.setMinutes(59);
endOfYesterday.setSeconds(59);
endOfYesterday.setMilliseconds(0);
const endFormatted = formatDate(endOfYesterday);

console.log("昨天00:00:00的时间（格式：Y-m-d H:i:s）：", startFormatted);
console.log("昨天23:59:59的时间（格式：Y-m-d H:i:s）：", endFormatted);

// 定义格式化日期的函数
function formatDate(date) {
    const year = date.getFullYear();
    const month = ('0' + (date.getMonth() + 1)).slice(-2);
    const day = ('0' + date.getDate()).slice(-2);
    const hours = ('0' + date.getHours()).slice(-2);
    const minutes = ('0' + date.getMinutes()).slice(-2);
    const seconds = ('0' + date.getSeconds()).slice(-2);

    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}
======================================================================================================================
参考地址： https://blog.csdn.net/weixin_47156401/article/details/135612506
mysql协议

建立链接是tcp三次握手 + mysql登录验证三次
断开链接是客户端发送断开1 + tcp四次握手

其中mysql三次握手，是服务端发起的，告诉客户端应该使用什么版本的协议。

mysql请求并不是发送mysql语句，而是发送十六进制数

从这个协议可以看出，rtmp也是发送的16进制数据

===========================================================================================
thinkPHP3.2 如果关闭了调试模式，在操作数据库字段的时候，取的是缓存文件中的字段，如果修改了数据库表的字段，需要删除缓存，或者添加debug.php配置
DB_FIELDS_CACHE 字段
layui 表格有合计的功能


===================================================================================================





